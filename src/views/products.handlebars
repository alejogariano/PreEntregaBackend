<body>
    {{#if user}}
        <h3 class="text-center">Bienvenido, 
            <strong>
                {{user.username}}
            </strong>
        </h3>
    {{else}}
        <p>
            Inicia sesión para poder comprar!
            <a href="/login" class="btn btn-info">Iniciar</a>
        </p>
    {{/if}}
    <div class="container mt-5">
        <h1 class="text-center">Productos</h1>
        <div class="row mb-4">
            <div class="col-md-2">
                <label for="limit" class="form-label">Límite</label>
                <select id="limit" class="form-select" onchange="fetchProducts()">
                    <option value="3">3</option>
                    <option value="6">6</option>
                    <option value="10" selected>10</option>
                    <option value="20">20</option>
                </select>
            </div>
            <div class="col-md-2">
                <label for="sort" class="form-label">Ordenar por precio</label>
                <select id="sort" class="form-select" onchange="fetchProducts()">
                    <option value="">Ninguno</option>
                    <option value="asc">De menor a mayor</option>
                    <option value="desc">De mayor a menor</option>
                </select>
            </div>
            <div class="col-md-3">
                <label for="category" class="form-label">Categoría</label>
                <div id="category" class="form-switch">
                    <!-- Categorías se llenarán dinámicamente con switches -->
                </div>
            </div>
            <div class="col-md-3">
                <label for="query" class="form-label">¿Qué estás buscando?</label>
                <input type="text" id="query" class="form-control" oninput="fetchProducts()">
            </div>
        </div>
        <div class="row mb-4">
            <div class="col-md-12 text-center">
                <a href="/products">
                    Limpiar filtros
                </a>
            </div>
        </div>
        <div id="error-message" class="alert alert-danger" style="display: none;"></div>
        <nav aria-label="Page navigation" class="mt-4">
            <ul id="pagination" class="pagination justify-content-center"></ul>
        </nav>

        <div id="products" class="row mt-4">
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', async () => {
            await loadCategories()
            fetchProducts()
        })

        async function loadCategories() {
            const response = await fetch('/api/products/categories')
            const data = await response.json()
            const categoryDiv = document.getElementById('category')

            if (data.status === 'success') {
                categoryDiv.innerHTML = data.categories.map(category => `
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="category-${category}" value="${category}" onchange="fetchProducts()">
                        <label class="form-check-label" for="category-${category}">${category}</label>
                    </div>
                `).join('')
            }
        }

        async function fetchProducts(page = 1) {
            const limit = document.getElementById('limit').value
            const sort = document.getElementById('sort').value
            const query = document.getElementById('query').value
            const categories = Array.from(document.querySelectorAll('.form-check-input:checked')).map(input => input.value)

            let url = `/api/products?limit=${limit}&page=${page}`
            if (sort) url += `&sort=${sort}`
            if (query) url += `&query=${query}`
            if (categories.length > 0) url += `&categories=${categories.join(',')}`

            try {
                const response = await fetch(url)
                const data = await response.json()

                if (data.status === 'success') {
                    const productsDiv = document.getElementById('products')
                    const paginationDiv = document.getElementById('pagination')
                    const errorMessageDiv = document.getElementById('error-message')

                    errorMessageDiv.style.display = 'none'
                    productsDiv.innerHTML = data.payload.map(product => `
                        <div class="col-md-4 mb-4">
                            <div class="card">
                                <img src="${product.thumbnail}" class="card-img-top img-fluid card-img-custom" style="height: 150px" alt="${product.description}">
                                <div class="card-body">
                                    <h5 class="card-title">${product.name}</h5>
                                    <p class="card-text">${product.description}</p>
                                    <p class="card-text"><strong>Precio:</strong> ${product.price}</p>
                                    <p class="card-text"><strong>Categoría:</strong> ${product.category}</p>
                                    <p class="card-text"><strong>Stock:</strong> ${product.stock}</p>
                                    <p class="card-text"><strong>Disponibilidad:</strong> ${product.availability ? 'Disponible' : 'No disponible'}</p>
                                    <button class="add-cart btn btn-success" data-product-id="${product._id}" data-product-stock="${product.stock}">Agregar al carrito</button>
                                    <a href="/products/${product._id}" class="btn btn-info">Ver Detalle</a>
                                </div>
                            </div>
                        </div>
                    `).join('')

                    paginationDiv.innerHTML = `
                        ${data.hasPrevPage ? `<li class="page-item"><a class="page-link" href="#" onclick="fetchProducts(${data.prevPage})">Anterior</a></li>` : ''}
                        <li class="page-item disabled"><a class="page-link" href="#">Página ${data.page} de ${data.totalPages}</a></li>
                        ${data.hasNextPage ? `<li class="page-item"><a class="page-link" href="#" onclick="fetchProducts(${data.nextPage})">Siguiente</a></li>` : ''}
                    `

                    addToCart()
                } else {
                    throw new Error(data.message)
                }
            } catch (error) {
                const errorMessageDiv = document.getElementById('error-message')
                errorMessageDiv.textContent = error.message
                errorMessageDiv.style.display = 'block'
                document.getElementById('products').innerHTML = ''
                document.getElementById('pagination').innerHTML = ''
            }
        }

        function addToCart() {
            document.querySelectorAll('.add-cart').forEach(button => {
                button.addEventListener('click', async (event) => {
                    const productId = button.getAttribute('data-product-id')
                    const cartId = '{{cartId}}'
                    const productStock = button.getAttribute('data-product-stock')

                    try {
                        const { value: cantidad } = await Swal.fire({
                            title: 'Selecciona la cantidad',
                            input: 'number',
                            inputLabel: 'Cantidad:',
                            inputPlaceholder: 'Ingrese la cantidad',
                            inputAttributes: {
                                min: 1,
                                max: 50,
                                step: 1
                            },
                            showCancelButton: true,
                            confirmButtonText: 'Agregar al carrito',
                            cancelButtonText: 'Cancelar',
                            allowOutsideClick: false,
                            inputValidator: (value) => {
                                if (!value) {
                                    return 'Debes ingresar una cantidad'
                                } else if (value > 50) {
                                    return `Solo puedes agregar hasta ${productStock} unidades`
                                }
                            }
                        })

                        if (cantidad) {
                            const response = await fetch(`/api/carts/${cartId}/products/${productId}`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ productId, cantidad })
                            })
                            const data = await response.json()

                            if (data.status === 'success') {
                                Swal.fire({
                                    title: '¡Éxito!',
                                    text: 'Producto agregado al carrito.',
                                    icon: 'success',
                                    showCancelButton: true,
                                    confirmButtonText: 'Ir al carrito',
                                    cancelButtonText: 'Continuar comprando'
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        window.location.href = `/carts/${cartId}`;
                                    }
                                })
                            } else {
                                Swal.fire('Error', 'No se pudo agregar el producto al carrito.', 'error')
                            }
                        }
                    } catch (error) {
                        Swal.fire('Error', 'Ocurrió un error al agregar el producto al carrito.', 'error')
                    }
                })
            })
        }
    </script>
</body>