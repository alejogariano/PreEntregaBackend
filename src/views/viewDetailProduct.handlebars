<div class="container mt-5">
    <h1 class="text-center">{{product.name}}</h1>
    <div class="row">
        <div class="col-md-6">
            <img src="{{product.thumbnail}}" class="img-fluid" alt="{{product.description}}" style="width: 540px;">
        </div>
        <div class="col-md-6">
            <p><strong>Nombre:</strong> {{product.name}}</p>
            <p><strong>Descripción:</strong> {{product.description}}</p>
            <p><strong>Precio:</strong> ${{product.price}}</p>
            <p><strong>Stock:</strong> {{product.stock}}</p>
            <p><strong>Vendedor:</strong> {{product.owner}}</p>
            <p class="list-group-item"><strong>Última modificación: </strong>{{product.formattedUpdatedAt}}</p>
                {{#if (different user.role "admin")}}
                    {{#if (equals product.stock 0)}}
                        <p class="text-danger">Producto agotado</p>
                    {{else}}
                        <button class="btn btn-success add-cart" data-product-id="{{product._id}}" data-product-stock="{{product.stock}}">Agregar al carrito</button>
                        <a class="btn btn-info" href="/products">Seguir comprando...</a>
                        <a class="btn btn-info" href="/carts/{{user.cart._id}}">Ir al carrito</a>
                    {{/if}}
                {{else}}
                    <a class="btn btn-info" target="_blank" href="/adminUpdateProduct/{{product._id}}">Editar</a>
                {{/if}}
        </div>
    </div>

    <div class="mt-5">
        <h3>Valoraciones</h3>
        {{#each product.ratings}}
        <div style="display: flex; justify-content:space-between">
            <p><strong>{{this.userId}}</strong></p>
            <p><strong>Valoración:</strong> {{this.rating}}/5</p>
        </div>
        {{else}}
            <p>No hay valoraciones aún.</p>
        {{/each}}
    </div>

    <div class="mt-5">
        <h3>Comentarios</h3>
        {{#each product.comments}}
        <div class="comment-container" style="display: flex; justify-content: space-between; border: 1px solid #ddd; border-radius: 8px; padding: 5px; margin-bottom: 5px;">
            <p><strong>Usuario:</strong> {{this.userId}}</p>
            <div class="comment-content" style="max-width: 70%; overflow-wrap: break-word; padding-left: 20px;">
                <p style="font-size: 14px;">{{this.comment}}</p>
                <p style="font-size: 12px; color: gray;">Fecha: <span class="formatted-date" data-date="{{this.createdAt}}"></span></p>
            </div>
        </div>
        <hr>
        {{else}}
            <p>No hay comentarios aún.</p>
        {{/each}}
    </div>

    {{#if user}}
    <div class="mt-5">
        <h3>Deja tu valoración y comentario</h3>
        <form id="ratingForm">
            <div class="mb-3">
                <label for="rating" class="form-label">Puntuación (1-5) (opcional)</label>
                <input type="number" class="form-control" id="rating" min="1" max="5">
            </div>
            <div class="mb-3">
                <label for="comment" class="form-label">Comentario</label>
                <textarea class="form-control" id="comment" rows="3"></textarea>
            </div>
            <button type="submit" class="btn btn-primary">Enviar</button>
        </form>
    </div>
    {{/if}}

</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const addCartButton = document.querySelector('.add-cart')
        if (addCartButton) {
            addCartButton.addEventListener('click', async (event) => {
                const button = event.target
                const productId = button.getAttribute('data-product-id')
                const cartId = '{{user.cart._id}}'
                const productStock = parseInt(button.getAttribute('data-product-stock'), 10)
                try {
                    const { value: cantidad } = await Swal.fire({
                        title: 'Selecciona la cantidad',
                        input: 'number',
                        inputLabel: `Cantidad (máximo ${productStock} unidades):`,
                        inputPlaceholder: 'Ingrese la cantidad',
                        inputAttributes: {
                            min: 1,
                            max: productStock,
                            step: 1
                        },
                        showCancelButton: true,
                        confirmButtonText: 'Agregar al carrito',
                        cancelButtonText: 'Cancelar',
                        allowOutsideClick: false,
                        inputValidator: (value) => {
                            const cantidad = parseInt(value, 10)
                            if (!value) {
                                return 'Debes ingresar una cantidad'
                            } else if (cantidad > productStock) {
                                return `Solo puedes agregar hasta ${productStock} unidades`
                            } else if (cantidad < 1) {
                                return 'La cantidad debe ser al menos 1'
                            }
                        }
                    })
                    if (cantidad) {
                        const response = await fetch(`/api/carts/${cartId}/products/${productId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ productId, cantidad })
                        })
                        const data = await response.json()
                        if (data.status === 'success') {
                            Swal.fire('¡Éxito!', 'Producto agregado al carrito.', 'success')
                        } else {
                            Swal.fire('Error', 'No se pudo agregar el producto al carrito.', 'error')
                        }
                    }
                } catch (error) {
                    Swal.fire('Error', 'Ocurrió un error al agregar el producto al carrito.', 'error')
                }
            })
        }
    })

    document.getElementById('ratingForm').addEventListener('submit', async (event) => {
        event.preventDefault()
        const productId = '{{product._id}}'
        const rating = document.getElementById('rating').value
        const comment = document.getElementById('comment').value

        try {
            const response = await fetch(`/api/products/${productId}/rate`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ rating, comment })
            })
            const data = await response.json()

            if (data.status === 'success') {
                Swal.fire('¡Éxito!', 'Gracias por tu valoración y comentario.', 'success')
                location.reload()
            } else {
                Swal.fire('Error', 'No se pudo enviar tu valoración.', 'error')
            }
        } catch (error) {
            Swal.fire('Error', 'Ocurrió un error al enviar tu valoración.', 'error')
        }
    })

    document.addEventListener('DOMContentLoaded', function() {
        document.querySelectorAll('.formatted-date').forEach(function(span) {
            const date = new Date(span.getAttribute('data-date'))
            const formattedDate = date.toLocaleDateString('es-ES', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            })
            span.textContent = formattedDate
        })
    })
</script>

<style>
    .comment-container {
        background-color: #f9f9f9;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .comment-content {
        max-height: 150px;
        overflow-y: auto;
    }

    .comment-content::-webkit-scrollbar {
        width: 6px;
    }

    .comment-content::-webkit-scrollbar-thumb {
        background-color: #ccc;
        border-radius: 10px;
    }
</style>